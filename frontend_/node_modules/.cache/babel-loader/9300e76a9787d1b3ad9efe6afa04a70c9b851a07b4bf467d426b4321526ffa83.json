{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Patrick Mraz\\\\Desktop\\\\Mood_tune\\\\MoodTuneApp\\\\IzvorniKod\\\\frontend_\\\\src\\\\components\\\\Music.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useCallback, useEffect } from 'react';\nimport \"./music.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Music({\n  formData,\n  setFormData,\n  odazivPostListening,\n  setOdazivPost,\n  setIsMusicCompleted\n}) {\n  _s();\n  const currentAudio = useRef();\n  const [musicData, setMusicData] = useState(null); // Use state for musicData\n  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\n  const [audioProgress, setAudioProgress] = useState(0);\n  const setOdaziv = useCallback(data => {\n    setOdazivPost(prevOdaziv => ({\n      ...prevOdaziv,\n      pjesmaId: data.pjesmaId\n    }));\n  }, [setOdazivPost]);\n  useEffect(() => {\n    const fetchSong = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/songs?mood=${formData.stanjeZeljeno}`);\n        const data = await response.json();\n        console.log(data);\n        setMusicData(data);\n        setOdaziv(data);\n      } catch (error) {\n        console.error('Ne mogu dohvatiti podatke o pjesmi:', error);\n      }\n    };\n    fetchSong();\n  }, [formData.stanjeZeljeno, setOdaziv]);\n  const handleAudioPlay = () => {\n    if (currentAudio.current.paused) {\n      currentAudio.current.play();\n      setIsAudioPlaying(true);\n    } else {\n      currentAudio.current.pause();\n      setIsAudioPlaying(false);\n    }\n  };\n  const handleAudioUpdate = () => {\n    const progress = parseInt(currentAudio.current.currentTime / currentAudio.current.duration * 100);\n    setAudioProgress(isNaN(progress) ? 0 : progress);\n  };\n  const handleMusicProgressBar = e => {\n    setAudioProgress(e.target.value);\n    currentAudio.current.currentTime = e.target.value * currentAudio.current.duration / 100;\n  };\n  const handleAudioEnded = () => {\n    setIsMusicCompleted(true); // Notify parent that music is completed\n  };\n  const style = {\n    backgroundColor: formData.stanjeZeljeno === \"tuzan\" ? \"rgba(47, 92, 149, 0.8)\" :\n    // Blue with 50% opacity\n    formData.stanjeZeljeno === \"sretan\" ? \"rgba(216, 198, 82, 0.8)\" :\n    // Yellow with 50% opacity\n    formData.stanjeZeljeno === \"motiviran\" ? \"rgba(95, 76, 141, 0.8)\" :\n    // Purple with 50% opacity\n    formData.stanjeZeljeno === \"smiren\" ? \"rgba(93, 129, 76, 0.8)\" :\n    // Green with 50% opacity\n    \"rgba(255, 255, 255, 1)\" // Default\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerM\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Stisnite Play i poslu\\u0161ajte va\\u0161u pjesmu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), musicData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        src: musicData.url // Update with correct property for song URL\n        ,\n        ref: currentAudio,\n        onTimeUpdate: handleAudioUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [musicData.naslov, \" - \", musicData.autor]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"U\\u010Ditavanje pjesme...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-container\",\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"musicControlers\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"play\",\n          onClick: handleAudioPlay,\n          children: isAudioPlaying ? \"||\" : \"►\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        name: \"musicProgressBar\",\n        className: \"musicProgressBar\",\n        value: audioProgress,\n        onChange: handleMusicProgressBar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n_s(Music, \"shqtGsWcKN778l8G0+LBvRLczPs=\");\n_c = Music;\nexport default Music;\nvar _c;\n$RefreshReg$(_c, \"Music\");","map":{"version":3,"names":["useState","useRef","useCallback","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Music","formData","setFormData","odazivPostListening","setOdazivPost","setIsMusicCompleted","_s","currentAudio","musicData","setMusicData","isAudioPlaying","setIsAudioPlaying","audioProgress","setAudioProgress","setOdaziv","data","prevOdaziv","pjesmaId","fetchSong","response","fetch","stanjeZeljeno","json","console","log","error","handleAudioPlay","current","paused","play","pause","handleAudioUpdate","progress","parseInt","currentTime","duration","isNaN","handleMusicProgressBar","e","target","value","handleAudioEnded","style","backgroundColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","url","ref","onTimeUpdate","naslov","autor","onClick","type","name","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Patrick Mraz/Desktop/Mood_tune/MoodTuneApp/IzvorniKod/frontend_/src/components/Music.js"],"sourcesContent":["import { useState, useRef, useCallback, useEffect } from 'react';\r\nimport \"./music.css\";\r\n\r\nfunction Music({ formData, setFormData, odazivPostListening, setOdazivPost, setIsMusicCompleted }) {\r\n    const currentAudio = useRef();\r\n    const [musicData, setMusicData] = useState(null); // Use state for musicData\r\n    const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n    const [audioProgress, setAudioProgress] = useState(0);\r\n\r\n    const setOdaziv = useCallback(\r\n        (data) => {\r\n            setOdazivPost((prevOdaziv) => ({\r\n                ...prevOdaziv,\r\n                pjesmaId: data.pjesmaId,\r\n            }));\r\n        },\r\n        [setOdazivPost]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const fetchSong = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:8080/api/songs?mood=${formData.stanjeZeljeno}`);\r\n                const data = await response.json();\r\n                console.log(data);\r\n                setMusicData(data); \r\n                setOdaziv(data); \r\n            } catch (error) {\r\n                console.error('Ne mogu dohvatiti podatke o pjesmi:', error);\r\n            }\r\n        };\r\n\r\n        fetchSong();\r\n    }, [formData.stanjeZeljeno, setOdaziv]);\r\n\r\n    const handleAudioPlay = () => {\r\n        if (currentAudio.current.paused) {\r\n            currentAudio.current.play();\r\n            setIsAudioPlaying(true);\r\n        } else {\r\n            currentAudio.current.pause();\r\n            setIsAudioPlaying(false);\r\n        }\r\n    };\r\n\r\n    const handleAudioUpdate = () => {\r\n        const progress = parseInt((currentAudio.current.currentTime / currentAudio.current.duration) * 100);\r\n        setAudioProgress(isNaN(progress) ? 0 : progress);\r\n    };\r\n\r\n    const handleMusicProgressBar = (e) => {\r\n        setAudioProgress(e.target.value);\r\n        currentAudio.current.currentTime = (e.target.value * currentAudio.current.duration) / 100;\r\n    };\r\n\r\n    const handleAudioEnded = () => {\r\n        setIsMusicCompleted(true); // Notify parent that music is completed\r\n    };\r\n\r\n    const style = {\r\n        backgroundColor:\r\n            formData.stanjeZeljeno === \"tuzan\" ? \"rgba(47, 92, 149, 0.8)\" : // Blue with 50% opacity\r\n                formData.stanjeZeljeno === \"sretan\" ? \"rgba(216, 198, 82, 0.8)\" : // Yellow with 50% opacity\r\n                    formData.stanjeZeljeno === \"motiviran\" ? \"rgba(95, 76, 141, 0.8)\" : // Purple with 50% opacity\r\n                        formData.stanjeZeljeno === \"smiren\" ? \"rgba(93, 129, 76, 0.8)\" : // Green with 50% opacity\r\n                            \"rgba(255, 255, 255, 1)\", // Default\r\n    };\r\n\r\n    return (\r\n        <div className='containerM'>\r\n            <h2>Stisnite Play i poslušajte vašu pjesmu</h2>\r\n\r\n            {/* Only render audio and song info when musicData is available */}\r\n            {musicData ? (\r\n                <>\r\n                    <audio\r\n                        src={musicData.url} // Update with correct property for song URL\r\n                        ref={currentAudio}\r\n                        onTimeUpdate={handleAudioUpdate}\r\n                    ></audio>\r\n\r\n                    <p>{musicData.naslov} - {musicData.autor}</p>\r\n                </>\r\n            ) : (\r\n                <p>Učitavanje pjesme...</p>\r\n            )}\r\n\r\n            <div className=\"music-container\" style={style}>\r\n                <div className='musicControlers'>\r\n                    <i className=\"play\" onClick={handleAudioPlay}>\r\n                        {isAudioPlaying ? \"||\" : \"►\"}\r\n                    </i>\r\n                </div>\r\n\r\n                <input\r\n                    type=\"range\"\r\n                    name=\"musicProgressBar\"\r\n                    className=\"musicProgressBar\"\r\n                    value={audioProgress}\r\n                    onChange={handleMusicProgressBar}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}